name: Auto tag + release on fxmanifest version change

on:
  push:
    paths:
      - fxmanifest.lua
    branches:
      - main  # Cambia si tu rama principal tiene otro nombre

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y zip gh

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Extract version from fxmanifest.lua
        id: manifest
        run: |
          VERSION=$(grep -E "^version ['\"]" fxmanifest.lua | sed -E "s/version ['\"]([^'\"]+)['\"]/\\1/")
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag-check
        run: |
          TAG="v${{ steps.manifest.outputs.version }}"
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "âœ… Tag $TAG already exists. Skipping."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "ðŸ”– Tag $TAG does not exist. It will be created."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.manifest.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Install project dependencies (if needed)
        run: bun install --frozen-lockfile

      - name: Run build script
        run: bun run build

      - name: Create ZIP bundle
        run: |
          mkdir -p ./temp/ox_lib
          cp ./{fxmanifest.lua,README.md,LICENSE,server.lua,client.lua,init.lua} ./temp/ox_lib 2>/dev/null || true
          # Copia carpetas relevantes si existen
          for dir in modules locales data; do
            [ -d "$dir" ] && cp -r "$dir" ./temp/ox_lib
          done
          cd temp && zip -r ../ox_lib.zip ./ox_lib

      - name: Create GitHub Release
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.manifest.outputs.version }}"
          gh release create "$TAG" \
            --title "$TAG" \
            --notes "Automatic release for $TAG" \
            ox_lib.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
